/*
 * Copyright 2008-2010 The sinkCell Development Team
 *
 * This file is part of sinkCell.
 *
 * sinkCell is free software; you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * sinkCell is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * sinkCell; if not, write to the Free Software Foundation, Inc., 51 Franklin St,
 * Fifth Floor, Boston, MA 02110-1301 USA
 */
package sinkjava;

/**
 *
 * @author sandra
 */
public class SinkFrame extends javax.swing.JFrame {

    Parameters parameters;
    World world;
    CanvasSink cSink;

    /** Creates new form sinkFrame */
    public SinkFrame() {
        initComponents();
        ImportXML importParameters = new ImportXML("/home/bicha/Escritorio/config.xml");
        parameters = importParameters.getParameters();

        world = new World( parameters);
        

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        canvasPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        StartMenuItem = new javax.swing.JMenuItem();
        pauseMenuItem = new javax.swing.JCheckBoxMenuItem();
        stopMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        configuratioMenuItem = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        jToolBar1.setRollover(true);
        jToolBar1.setMinimumSize(new java.awt.Dimension(400, 20));
        jToolBar1.setPreferredSize(new java.awt.Dimension(400, 20));
        getContentPane().add(jToolBar1);

        canvasPanel.setMinimumSize(new java.awt.Dimension(600, 600));
        canvasPanel.setPreferredSize(new java.awt.Dimension(600, 600));

        javax.swing.GroupLayout canvasPanelLayout = new javax.swing.GroupLayout(canvasPanel);
        canvasPanel.setLayout(canvasPanelLayout);
        canvasPanelLayout.setHorizontalGroup(
            canvasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        canvasPanelLayout.setVerticalGroup(
            canvasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 798, Short.MAX_VALUE)
        );

        getContentPane().add(canvasPanel);

        jMenu1.setText("Simulation");

        StartMenuItem.setMnemonic('S');
        StartMenuItem.setText("Start Simulation");
        StartMenuItem.setToolTipText(" Starts the cellular automaton simulation");
        StartMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(StartMenuItem);

        pauseMenuItem.setMnemonic('P');
        pauseMenuItem.setText("Pause simulation");
        pauseMenuItem.setToolTipText("Pause simulation.");
        jMenu1.add(pauseMenuItem);

        stopMenuItem.setMnemonic('O');
        stopMenuItem.setText("Stop Simulation");
        stopMenuItem.setToolTipText("Stops simulation.");
        jMenu1.add(stopMenuItem);

        jSeparator1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jMenu1.add(jSeparator1);

        exitMenuItem.setMnemonic('E');
        exitMenuItem.setText("Exit");
        exitMenuItem.setToolTipText("Close aplication");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(exitMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setMnemonic('P');
        jMenu2.setText("Configuration");
        jMenu2.setToolTipText("Sets the simulation parameters");

        configuratioMenuItem.setMnemonic('S');
        configuratioMenuItem.setText("Set Parameters");
        configuratioMenuItem.setToolTipText("Form to set the simulation parameters");
        configuratioMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configuratioMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(configuratioMenuItem);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");

        jMenuItem2.setMnemonic('H');
        jMenuItem2.setText("Help");
        jMenuItem2.setToolTipText("Sink help");
        jMenu3.add(jMenuItem2);

        jMenuItem3.setMnemonic('A');
        jMenuItem3.setText("About us");
        jMenuItem3.setToolTipText("About us");
        jMenu3.add(jMenuItem3);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void configuratioMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configuratioMenuItemActionPerformed
        // TODO add your handling code here:
        Configuration config = new Configuration(parameters);        
        config.setVisible(true);
    }//GEN-LAST:event_configuratioMenuItemActionPerformed

    private void StartMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartMenuItemActionPerformed
        world = new World(parameters);
       cSink = new CanvasSink(world);
        canvasPanel.add(cSink);
        for(int i = 0; i < parameters.cicles; i++){
            if(!pauseMenuItem.isSelected()){
                world.cicle();
                cSink.repaint();
            }
        }
    }//GEN-LAST:event_StartMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        this.dispose();
    }//GEN-LAST:event_exitMenuItemActionPerformed


   /* public boolean update_world()
				{
					Mark = 0;

					if(pause==false){
						//If cicle >= maxim number of cicles, simulation is stopped with Mark = 1
						if(cicle >= this.max_cicle){
								this.Mark= 1;
								fwr.Close(); //Close the "excel" file
								//Menu-buttons sensitive
								this.NewSimulation.Sensitive = true;
								this.StopSimulation.Sensitive = false;
								this.PauseSimulation.Sensitive= false;
						}else{
							//New cicle starts
							this.cicle++;
							this.world_start.cicle();

							//Dates of "the world"
							float population = this.world_start.get_population();
							float density = this.world_start.get_density();
							float proximity = this.world_start.get_proximity();

							//Write the statusbar
							this.statusbar1.Push(1, "Cicle: "+this.cicle.ToString() +"            Population: "+population.ToString()+"    Density: "+density.ToString()+"     Neighborhood: "+proximity.ToString());

							//Write the "exel" file every cicle
							string info = (this.cicle).ToString()+";"+population.ToString()+";"+density.ToString()+";"+proximity.ToString();
							fwr.WriteLine(info);
						}
						this.drawingarea1.QueueDraw();
					}
					return false;
				}*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem StartMenuItem;
    private javax.swing.JPanel canvasPanel;
    private javax.swing.JMenuItem configuratioMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JCheckBoxMenuItem pauseMenuItem;
    private javax.swing.JMenuItem stopMenuItem;
    // End of variables declaration//GEN-END:variables
}
