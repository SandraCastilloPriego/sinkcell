/*
 * Copyright 2008-2010 The sinkCell Development Team
 *
 * This file is part of sinkCell.
 *
 * sinkCell is free software; you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * sinkCell is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * sinkCell; if not, write to the Free Software Foundation, Inc., 51 Franklin St,
 * Fifth Floor, Boston, MA 02110-1301 USA
 */
package sinkjava;

import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author sandra
 */
public class SinkFrame extends javax.swing.JFrame {

    private Parameters parameters;
    private Configuration config;
    private World world;
    private CanvasSink cSink;
    private sinkThread thread;
    private boolean stopSignal = false;
    private ExportCSV exportWorld;

    /** Creates new form sinkFrame */
    public SinkFrame() {
        ImportXML importParameters = new ImportXML();
        parameters = importParameters.getParameters();
        config = new Configuration(parameters);

        initComponents();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        labelBar = new javax.swing.JLabel();
        labelBar1 = new javax.swing.JLabel();
        labelBar2 = new javax.swing.JLabel();
        labelBar3 = new javax.swing.JLabel();
        canvasPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        StartMenuItem = new javax.swing.JMenuItem();
        pauseMenuItem = new javax.swing.JCheckBoxMenuItem();
        stopMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        configuratioMenuItem = new javax.swing.JMenuItem();
        saveFileMenuItem = new javax.swing.JCheckBoxMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.PAGE_AXIS));

        jToolBar1.setRollover(true);
        jToolBar1.setMinimumSize(new java.awt.Dimension(600, 20));
        jToolBar1.setPreferredSize(new java.awt.Dimension(600, 20));

        labelBar.setMaximumSize(new java.awt.Dimension(160, 50));
        labelBar.setMinimumSize(new java.awt.Dimension(100, 50));
        labelBar.setPreferredSize(new java.awt.Dimension(100, 50));
        jToolBar1.add(labelBar);

        labelBar1.setMaximumSize(new java.awt.Dimension(160, 50));
        labelBar1.setMinimumSize(new java.awt.Dimension(100, 50));
        labelBar1.setPreferredSize(new java.awt.Dimension(100, 50));
        jToolBar1.add(labelBar1);

        labelBar2.setMaximumSize(new java.awt.Dimension(160, 50));
        labelBar2.setMinimumSize(new java.awt.Dimension(100, 50));
        labelBar2.setPreferredSize(new java.awt.Dimension(100, 50));
        jToolBar1.add(labelBar2);

        labelBar3.setMaximumSize(new java.awt.Dimension(160, 50));
        labelBar3.setMinimumSize(new java.awt.Dimension(100, 50));
        labelBar3.setPreferredSize(new java.awt.Dimension(100, 50));
        jToolBar1.add(labelBar3);

        jPanel1.add(jToolBar1);

        canvasPanel.setMinimumSize(new java.awt.Dimension(600, 600));
        canvasPanel.setPreferredSize(new java.awt.Dimension(600, 600));

        javax.swing.GroupLayout canvasPanelLayout = new javax.swing.GroupLayout(canvasPanel);
        canvasPanel.setLayout(canvasPanelLayout);
        canvasPanelLayout.setHorizontalGroup(
            canvasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        canvasPanelLayout.setVerticalGroup(
            canvasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 798, Short.MAX_VALUE)
        );

        jPanel1.add(canvasPanel);

        getContentPane().add(jPanel1);

        jMenu1.setText("Simulation");

        StartMenuItem.setMnemonic('S');
        StartMenuItem.setText("Start Simulation");
        StartMenuItem.setToolTipText(" Starts the cellular automaton simulation");
        StartMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(StartMenuItem);

        pauseMenuItem.setMnemonic('P');
        pauseMenuItem.setText("Pause simulation");
        pauseMenuItem.setToolTipText("Pause simulation.");
        jMenu1.add(pauseMenuItem);

        stopMenuItem.setMnemonic('O');
        stopMenuItem.setText("Stop Simulation");
        stopMenuItem.setToolTipText("Stops simulation.");
        stopMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(stopMenuItem);

        jSeparator1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jMenu1.add(jSeparator1);

        exitMenuItem.setMnemonic('E');
        exitMenuItem.setText("Exit");
        exitMenuItem.setToolTipText("Close aplication");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(exitMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setMnemonic('P');
        jMenu2.setText("Configuration");
        jMenu2.setToolTipText("Sets the simulation parameters");

        configuratioMenuItem.setMnemonic('S');
        configuratioMenuItem.setText("Set Parameters");
        configuratioMenuItem.setToolTipText("Form to set the simulation parameters");
        configuratioMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configuratioMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(configuratioMenuItem);

        saveFileMenuItem.setText("Export CSV file");
        jMenu2.add(saveFileMenuItem);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");

        jMenuItem2.setMnemonic('H');
        jMenuItem2.setText("Help");
        jMenuItem2.setToolTipText("Sink help");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuItem3.setMnemonic('A');
        jMenuItem3.setText("About us");
        jMenuItem3.setToolTipText("About us");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void configuratioMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configuratioMenuItemActionPerformed
        config.setVisible(true);
    }//GEN-LAST:event_configuratioMenuItemActionPerformed

    private void StartMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartMenuItemActionPerformed

        stopSignal = false;
        canvasPanel.removeAll();

        // Gets parameters from "configuration" dialog
        parameters = config.getParameters();

        // Saves report file
        if (this.saveFileMenuItem.isSelected()) {
            exportWorld = new ExportCSV();
            exportWorld.exportParameters(parameters);
        }

        world = new World(parameters);
        world.init();

        // Paints the world
        cSink = new CanvasSink(world, parameters);
        canvasPanel.add(cSink);

        // Starts simulation
        thread = new sinkThread(cSink, parameters.cicles);
        thread.start();
        this.validate();
    }//GEN-LAST:event_StartMenuItemActionPerformed

    public class sinkThread extends Thread {

        public sinkThread(CanvasSink sink, int cicles) {
        }

        @Override
        public void run() {
            for (int i = 0; i < parameters.cicles; i++) {
                // If there is an stop signal the simulation breaks the loop.
                if (stopSignal) {
                    break;
                }
                if (!pauseMenuItem.isSelected()) {
                    // Paint the graphics
                    cSink.update(cSink.getGraphics());

                    // Writes some data in the bar
                    int population = world.getPopulation();
                    float density = world.getDensity();
                    float proximity = world.getProximity();

                    labelBar.setText("Iteration n = " + i);
                    labelBar1.setText(" Population = " + population);
                    labelBar2.setText(" Density = " + density);
                    labelBar3.setText(" Proximity = " + proximity);

                    // Saves report file
                    if (saveFileMenuItem.isSelected()) {
                        exportWorld.exportData(i, population, density, proximity);
                    }

                    // Makes the simulation slowly
                    try {
                        sleep(300);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(SinkFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    world.cicle();
                } else {
                    cSink.repaint();
                    i--;
                }
            }

        }
    }

    private void stopMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopMenuItemActionPerformed
        // Closes the report file
        if (saveFileMenuItem.isSelected()) {
            exportWorld.closeFile();
        }
        // Removes the graphics
        this.canvasPanel.removeAll();

        this.stopSignal = true;
        this.validate();
    }//GEN-LAST:event_stopMenuItemActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        Help help = new Help(this, false);
        help.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        About about = new About(this, false);
        about.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        // Closes the report file
        if (saveFileMenuItem.isSelected()) {
            exportWorld.closeFile();
        }
        // Export the parameters file --> config.xml
        new ExportXML(parameters);
        this.dispose();
    }//GEN-LAST:event_exitMenuItemActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem StartMenuItem;
    private javax.swing.JPanel canvasPanel;
    private javax.swing.JMenuItem configuratioMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel labelBar;
    private javax.swing.JLabel labelBar1;
    private javax.swing.JLabel labelBar2;
    private javax.swing.JLabel labelBar3;
    private javax.swing.JCheckBoxMenuItem pauseMenuItem;
    private javax.swing.JCheckBoxMenuItem saveFileMenuItem;
    private javax.swing.JMenuItem stopMenuItem;
    // End of variables declaration//GEN-END:variables
}
